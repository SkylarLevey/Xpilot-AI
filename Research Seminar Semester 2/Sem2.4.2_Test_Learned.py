#test one on GA Boi.py
import libpyAI as ai
import math
from random import random

def getSendData():
    #Metadata
    heading = int(ai.selfHeadingDeg())
    tracking = int(ai.selfTrackingDeg())
    trackHeadRelative = (tracking-heading)/360
    speed = ai.selfSpeed()/10
    #Wall Feelers
    trackWall = ai.wallFeeler(500, tracking)
    frontL = ai.wallFeeler(500, heading + 10)
    frontR = ai.wallFeeler(500, heading - 10)
    leftF = ai.wallFeeler(500, heading + 70)
    leftB = ai.wallFeeler(500, heading + 110)
    rightF = ai.wallFeeler(500,heading - 70)
    rightB = ai.wallFeeler(500,heading - 110)
    backL = ai.wallFeeler(500, heading - 200)
    backR = ai.wallFeeler(500, heading - 160)
    
    data = [trackHeadRelative,speed]
    for i in [trackWall,frontL,frontR,leftF,leftB,rightF,rightB,backL,backR]:
        if i == -1:
            data.append(0)
        else:
            data.append(1 - i/500)
    return data

def getOutput(inputs, inputLayerNodeCount, innerLayerNodeCount, outputLayerNodeCount, weight):
    #recurrence
    global midNode
    inputs.insert(0,midNode)

    innerNodeOutput = []
    for i in range(innerLayerNodeCount):
        innerNodeOutput.append(0)
    outputNodeOutput = []
    for j in range(outputLayerNodeCount):
        outputNodeOutput.append(0)
	#calculate our neural net's outputs

    #for each node in the hidden layer
    for innerNode in range(innerLayerNodeCount):
        innerSum = 0
		#sum up all inputs * their given weights
        for inputValue in range(inputLayerNodeCount):
            innerSum += inputs[inputValue]*weight[innerNode][inputValue]
		#record the output in a list
        innerNodeOutput[innerNode] = squash(innerSum - weight[innerNode][inputLayerNodeCount])

    #for each node in the output layer
    for outputNode in range(outputLayerNodeCount):
        outputSum = 0
        #sum up all inputs * their given weights
        for innerNodeOpt in range(innerLayerNodeCount):
            outputSum += innerNodeOutput[innerNodeOpt]*weight[innerLayerNodeCount+outputNode][innerNodeOpt]
        #record the output in a list
        outputNodeOutput[outputNode] = squash(outputSum - weight[innerLayerNodeCount+outputNode][innerLayerNodeCount])

    #recurrence part 2
    midNode = innerNodeOutput[0]

    return outputNodeOutput

def squash(inputSum):
	return 1/(1+math.exp(-inputSum))

def AI_loop():
	#Release keys
    ai.thrust(0)
    ai.turnLeft(0)
    ai.turnRight(0)
    ai.setTurnSpeed(45)
	
	#take 1
    #weight = [[-0.4496755366413642, -0.4559778207457603, -1.728355610955196, 0.6185412544606327, 3.3794225846481107, -3.4798905675233733, 2.2543264226827966, 1.9914295922873007, -0.703275058596823, -1.7953199127808883, 1.9892974098464955, 5.884233548514069, 0.32751857478231816], [2.243313182088697, 0.4759691709916452, 13.15503881201279, -4.693463842944288, 0.7839064072751248, -0.03990104834778248, -0.13447341194894763, -3.543191255140531, -0.46635846316044827, -10.376089123927077, -1.5080777101655647, 4.2030917060961706, -2.9185095347895773], [0.4144058027384077, 0.3786995064936966, 6.708131289905311, -0.04870645295302057, -0.9736377910810063, -3.074853135903227, 0.24535759224660114, 2.7412263298051545, 1.8164851688089483, 0.3826513591090053, 8.439073473454068, -15.612880456214599, -2.0186404163413396], [-0.42128826931224245, 0.04494728335950386, 1.7446167820211929, -0.4839760430553415, 2.846898662326894, -3.195414520192548, 5.9895091681885235, 4.8870186538333025, -1.7592617132312776, -1.2477740794816288, -0.8778409274775768, -10.69189226528348, -1.7479029413892648], [1.553225269411062, 0.0847896558189663, 4.622142525027847, -2.356074003062808, -0.8262385745291869, 13.447465223503023, -2.0575407129741765, -0.2424415230650492, -3.189887161698692, -3.7389565686305195, -1.5054279652365947, -3.308941194498238, 0.20893333363839647], [3.075233936441304, 0.29859867480410873, 0.9468902187191499, 1.0835802527315277, 0.4625317919891779, 4.051402094744826], [4.935244463467257, -4.609468523976753, -2.4097494575420577, 0.34209155115639633, -3.529611251855417, 2.544663561997351]]
    #weight = [[0.9611354184533848, -0.08234509806904121, 12.374621861386148, 1.1045032142597875, 0.027056947409613223, -0.20322392577662282, 0.09810860053856872, 0.3638942394939344, 0.05600902737903649, -0.3946795278211153, -1.658830124726321, -0.0033283822599835884, 2.0940482159309686], [1.820449461455559, 1.1713905305950008, 7.017030817974392, -6.044572842627054, 0.9144834286770516, 0.8849240129445629, 1.0409855170189535, -5.9558108391624325, 2.7371304569387593, -3.0712033781953028, 0.15838817495409932, 1.3896994764723964, -4.011600337921476], [2.2297953724919717, 0.9032318125816082, 5.704367049238783, -4.020341654198831, 0.1521144944073251, 1.0795744321144014, -2.4236839228252247, -7.348160091645062, 0.4324174737307933, 0.7028452898434138, -1.0111398271205656, 2.235490172842916, -2.421263469822526], [2.9148780764869158, 0.617980610565559, 7.552567631025351, 3.932173158064129, -0.9469696275175395, -1.208060239313696, 0.3118885477094705, 2.6011045781148745, -0.42991033714927557, -0.1147573900247654, -2.3987176872052953, -1.943323409879712, 1.2817626863757738], [1.507581328489793, -1.0184542275904593, 5.598374570350096, -3.9977198972168573, 1.4319077843834844, 0.9567107038446621, 0.9774792652012813, -4.861007375625739, -4.542450046500073, -2.238182740644075, 0.1056409039943489, 0.3112551085977919, -2.2291544725921995], [-0.2641398327969279, 0.6402468096532729, -2.1444116286275934, 0.73994547475759, 1.1602856817858114, 0.8094309461647214], [-5.676472832793324, -3.459117974421802, -2.062673075269311, -1.6500741698922259, -2.408126816837573, -9.385104706611017]]
    #weight = [[-2.0954982007255882, -0.28185996889038945, 0.9597223056319483, 7.71503301202496, 0.5006088887257671, -1.5341797122544787, 0.009666108142174123, 8.041590184728472, -1.946224524169532, -5.702549134205022, 2.6391183454711804, -7.881578850631242, -2.5898046859576387], [-0.39621326705689264, -0.6575012863522087, 22.10187137950243, 0.9290064890308354, -0.3881609347761541, -0.07573936052149911, -0.7519960945764234, 0.02716147439948959, -0.8558226759461414, -0.6557766071315377, -1.518540643338598, -0.09998564367160545, 3.619991970917915], [4.501006348460633, 0.0649610085207056, 1.971687766106229, -5.689321681746234, 0.30812927396670586, -1.798297692605259, 0.0067230381410297285, -8.20759283540128, -1.4193338381854668, -14.889941282474746, 4.44718308981228, 6.96877019112682, -7.124086688333981], [1.3853514262995934, 1.5167147506433232, 2.9232141129480125, -8.493567446427722, -0.8351974688257938, 0.9513542523589459, 0.6942031807049699, -4.983919210124504, 9.83812543616158, 4.45691613124353, -3.558442028556295, -7.213973118051515, -5.481124957648644], [3.9381058835867924, 0.6253662924449497, -1.1311870878454542, -8.13246222161545, 3.647954323533983, -0.06289268934298727, 3.1159498189098596, -1.0620483439124015, -4.824087212773615, 0.4693389879397181, 0.2747711090663049, -0.5200426785165749, -3.4284316445336582], [1.459135266024447, -0.0070463530345203015, 0.42066749000692405, 0.3075159685900376, 0.8527640294134913, 1.4465993573636253], [0.8896832548844029, -10.303243021329655, -3.3590574019886357, -3.702871631585892, -1.5718003854198375, -11.714122229625085]]
    #weight = [[0.07944205127959661, 0.5967453162015617, -0.04550828590006287, 0.5486749755300435, -1.0727135082094021, 0.5869999468174426, -0.7987047535048336, -0.638218366850338, 1.3159861664862542, 4.5898711130439995, -2.496998757909519, -2.506696162053902, 2.2867051907755616], [0.617711266385485, 1.0421056527176973, -0.07275034959551538, 0.5875830226450476, -1.4655520924435963, 0.3771324624766942, -0.7451024842169621, -1.0453409222108379, 3.215616311964703, 2.377878121782914, -1.3547784845259945, -3.730381980717157, 2.054732452807481], [1.5744410624039216, -0.5534518191360517, 3.9552702276428304, -1.226845451650318, 1.2197627552640842, -0.0703855920915386, 0.5068053664050256, -7.835668378013488, -0.14236534917067778, -0.43954154517554295, 0.618843462201916, 1.3601441323433872, -3.5035539917771255], [1.519872024247401, 0.30050128052428926, -0.8894024566352174, -0.5559815876762363, -1.5488362236056403, 0.7871407036854292, -0.9139389913881832, -2.323813163045345, -0.0017507924145152426, 1.4111738428368794, 0.13042581073968276, 7.091313462564923, 2.8182004134814482], [-0.8248698448644789, 0.6686411187483632, -1.6879381026486395, 0.6010456980031311, 0.01853185833989469, 2.3168555917074753, -0.0642389539297928, 2.4523177355572945, 0.8880969921308216, 1.7532011081802343, 3.3774438943624747, 3.0158707734140484, 1.8768706340122276], [-2.7451727405207986, -1.5761548793965487, -1.094081787348675, -1.5183133158724327, -1.4780648221636417, -3.5411309925283403], [0.687039482941918, -1.4924931656549747, -7.101592376788121, -0.5189728511538035, 1.5455327150865028, -1.7039187071290642]]

    weight = [[0.9084667187587555, -2.5854760996520425, -0.4584403258122283, 0.7996075970840024, 0.0348961209042119, 0.6622876630172846, -1.3615260799404445, -0.9115139865497064, -0.7782149876647683, 1.1345382560501767, -0.8137713515088797, 0.63888959301723, 0.5144719258070829], [0.3290865645393211, -1.8720025763940835, 1.0031957362951225, -0.1619806000355914, 0.3800725916509755, 1.6250580006341449, -0.15212206983906523, -1.5922114334796134, 0.48287278857897414, 0.49400275076629624, -0.6454397284416891, -0.3356129549830243, 1.1806548311266414], [-0.07343871155066854, -0.4708998713435034, 1.3064224997784146, -0.915630711905946, 0.057468538978268556, 0.1997492608911154, -1.5379564966433539, -0.37636239479078754, 0.28203958839198895, 0.8609985672078302, -0.2560548358910912, 0.5167381972294203, -0.07512322284297157], [-0.45891476383588403, -1.5704974204099729, 1.4037578371142367, -1.7560743450944083, -0.003071291465314002, -0.22689109716103142, -0.5295250462350612, -0.508509447602517, -0.7188483771074499, -0.3221511563596488, 0.031277711106545605, 0.3395679522951811, 0.6956092514798029], [0.5422773703377797, -0.09555704289778683, 1.0833980444823164, -1.2601153216481937, 0.08633363872901842, 1.8232168882680957, -0.1660977152870905, -1.4088243661808983, 0.2681294918466611, 0.32823783334131845, 0.4005432051445343, -0.854577743534942, -0.19539850396504788], [-3.1202774262891544, -1.3262999912242655, 0.6755626211774748, 1.1891832674617813, 1.711559909024524, -0.7598685528614055], [0.9502496584761435, -1.2123334302520872, -0.6445290345717581, -1.8837584002117622, -2.1337081898888215, -0.45100004626420553]]

    sendData = getSendData()
    
    output = getOutput(sendData, 12, 5, 2, weight)
    
    turn, thrust = "N", "N"

    if output[0] >= .55:
        ai.turnRight(1)
        turn = "R"
    elif output[0] < .45:
        ai.turnLeft(1)
        turn = "L"
    ai.setTurnSpeed(abs(output[0]-.5)*100)

    if output[1] > random():
        ai.thrust(1)
        thrust = "Y"

    if ai.selfAlive():
        print (turn +"  "+ str(round(output[0],3)) +"  |  "+ thrust +"  "+ str(round(output[1],3)))

midNode = 0
#ai.start(AI_loop,["-name","bob","-join","localhost"])
ai.start(AI_loop,["-name","bob","-join","localhost"])  






