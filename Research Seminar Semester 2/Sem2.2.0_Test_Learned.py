#test one on GA Boi.py
import libpyAI as ai
import math
from random import random

def getSendData():
    #Metadata
    heading = int(ai.selfHeadingDeg())
    tracking = int(ai.selfTrackingDeg())
    trackHeadRelative = (tracking-heading)/360
    speed = ai.selfSpeed()/10
    #Wall Feelers
    trackWall = ai.wallFeeler(500, tracking)
    trackL10 = ai.wallFeeler(500, tracking + 10)
    trackR10 = ai.wallFeeler(500, tracking - 10)
    frontWall = ai.wallFeeler(500, heading)
    frontL = ai.wallFeeler(500, heading + 10)
    frontR = ai.wallFeeler(500, heading - 10)
    leftWall = ai.wallFeeler(500, heading+90)
    rightWall = ai.wallFeeler(500,heading-90)
    backWall = ai.wallFeeler(500, heading - 180)
    
    data = [heading/360,tracking/360,trackHeadRelative,speed]
    for i in [trackWall,trackL10,trackR10,frontWall,frontL,frontR,leftWall,rightWall,backWall]:
        if i == -1:
            data.append(0)
        else:
            data.append(1 - i/500)

    return data


def getOutput(inputs, inputLayerNodeCount, innerLayerNodeCount, outputLayerNodeCount, weight):
	innerNodeOutput = []
	for i in range(innerLayerNodeCount):
		innerNodeOutput.append(0)
	outputNodeOutput = []
	for j in range(outputLayerNodeCount):
		outputNodeOutput.append(0)

	#calculate our neural net's outputs

	#for each node in the hidden layer
	for innerNode in range(innerLayerNodeCount):
		innerSum = 0
		#sum up all inputs * their given weights
		for inputValue in range(inputLayerNodeCount):
			innerSum += inputs[inputValue]*weight[innerNode][inputValue]
		#record the output in a list
		innerNodeOutput[innerNode] = squash(innerSum - weight[innerNode][inputLayerNodeCount])
	#for each node in the output layer
	for outputNode in range(outputLayerNodeCount):
		outputSum = 0
		#sum up all inputs * their given weights
		for innerNodeOpt in range(innerLayerNodeCount):
			outputSum += innerNodeOutput[innerNodeOpt]*weight[innerLayerNodeCount+outputNode][innerNodeOpt]
		#record the output in a list
		outputNodeOutput[outputNode] = squash(outputSum - weight[innerLayerNodeCount+outputNode][innerLayerNodeCount])

	return outputNodeOutput

def squash(inputSum):
	return 1/(1+math.exp(-inputSum))


def AI_loop():
	#Release keys
    ai.thrust(0)
    ai.turnLeft(0)
    ai.turnRight(0)
    ai.setTurnSpeed(45)
	
	#noshoot simple v1
    weight = [[-1.375226326378077, -1.0616645490984604, -1.15754420761076, -10.03441544923939, 0.032486797574321505, 0.02829951629629745, 0.6829529147591547, -0.9729144226523149, -1.4923506850008832, 0.7197010726333544, -2.3874975000432754, -2.7423587559521314, 4.80017971728124, -0.13280002787530232], [3.135842244204535, 3.110052510277927, -1.3022165348938823, -2.841570495681202, 5.175919254672306, 4.748172985655421, 3.0189330490250006, -1.7893441425420011, -1.1114943860935838, -2.0075758415631726, -1.640972284171185, 2.1348026063348846, -4.1179568568234854, 5.291207391072421], [-7.378031853744056, 3.238288279926906, 9.641688860197224, -4.411341460146402, 1.9779009603326196, 2.686787409032048, 0.0023975077575022837, 0.09265021614218846, -0.4066361168818336, -0.6988237469365046, -2.1377773981366284, 0.11127262083382838, 0.13316955883258333, 0.003999410732394121], [2.9736924627305608, 1.823719453614858, -2.1502905320405143, -9.328126274835542, 0.5171904981721813, -0.2649029347430971, 0.13643986582959408, 2.588532038572082, 1.538025813345429, -2.1708491904981653, 4.516001406298673, 0.32176654591837717, 4.023676887356982, 7.848379581754092], [2.1647158052463897, -0.6020592933137879, -2.231219442910271, -6.292928311480592, 1.4163813600072341, 3.88654737627389, -0.43923317175346555, 2.7641152996275165, -1.2840528657270571, 1.6176650409603361, 6.42851112510374, -2.766761671805811, 2.051536306494962, 3.6882776602879153], [1.8077399525108164, 2.458765845748956, 0.9271047543342804, -10.150370052346005, -2.0344875554079245, -1.2339169139680388, -2.888860622684438, 0.5057747013435695, 0.3103144056068234, -0.20586168054967754, -0.19745212756329472, 2.0143138232252302, 2.7696491900375046, 1.4603664549212731], [-0.23929642440379986, -0.4778975001645931, -0.1098716827551821, 0.21142564811898756, 0.1438612641201703, -0.23237346215176038, 0.20112085237062405], [7.30680666641802, 4.933952038327895, 3.070637947906584, 3.741515730473506, 3.7073434548593207, 8.086879864985454, 10.026954398325191]]
	#noshoot simple v1
    #weight = [[-1.023743271974619, 0.444266124426042, 1.0050735491526335, 6.159737740595824, -0.6308880207682191, -2.0911269737947067, 2.5135026253634494, 0.3515767251441574, -2.1320939078988395, 3.047862487091555, -3.8988997018822973, 3.4703390025912597, -4.373223943729248, 1.4127554400551523], [0.7427704936500246, -0.5798355467665999, -0.29896721038254176, 8.069371073265764, -2.581691559572309, -2.5282135559645664, -2.96315615434767, 1.2530127355507574, 5.8540430427669, -0.26218689574657167, 3.9347600050219618, 0.18892773253478629, -7.286600170612636, 0.8083232955809879], [-3.5486289076308646, 4.819041501737737, 8.70867600460236, 6.8066073756127485, 0.6122240368016446, 4.860918117069203, 3.1518848222229487, -0.13382356026771636, 1.789577224484976, -0.6808031681386091, -0.2872449812908018, 1.0891307239415493, -8.022385356855203, 1.2107460385288795], [0.6128354869502226, 0.14240184455270713, -1.5233000715200844, 4.985381000107978, -3.8249870680490097, -10.686083482574146, -1.4868254588794783, -0.43158364253432274, 0.5256742283048801, -1.4412120618962108, 0.931424348507278, -3.2829934875744184, 0.43872671704526045, -8.41751994543268], [2.1220441150753087, 0.8786867725284478, -0.9903913033789571, 8.308625187984479, -1.528444350319283, -3.7812928036283, -3.905147379987352, -0.49073286664120663, -3.0323516633106444, -0.2786227844707235, 2.420682407748011, -3.0913441134230926, -6.5178764610868045, -1.2023873938562408], [-0.5091307516093486, -3.9608264092273964, -3.1904266763968425, 12.032694077240157, 1.378281800355542, -1.5990141024803444, 1.2304651300352838, -2.1221719326601165, -5.059337251182292, -0.6598576506368521, -4.2628802309569975, 0.2811441442380384, -1.7436486586177173, 1.2261835439593782], [-0.2735406625198526, 0.5156908507887116, 0.08955215794130506, -0.3275067116198191, -0.04375959013741891, -0.04380897876295868, -0.544672240061947], [-4.140185357428835, -7.180937413846947, -7.5734258369782035, -4.2989248394577215, -2.9530543660642254, -6.212715640595886, -9.513817382913011]]

    sendData = getSendData()
    output = getOutput(sendData, 13, 6, 2,  weight)

    turn, thrust = "N", "N"

    if output[0] >= .6:
        ai.turnRight(1)
        turn = "R"
    elif output[0] < .4:
        ai.turnLeft(1)
        turn = "L"
    ai.setTurnSpeed(abs(output[0]-.5)*100)

    if output[1] > random():
        ai.thrust(1)
        thrust = "Y"

    if ai.selfAlive():
        print (turn +"  "+ str(round(output[0],3)) +"  |  "+ thrust +"  "+ str(round(output[1],3)))


ai.start(AI_loop,["-name","Sem2Learnedsimple","-join","localhost"])  
